{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fnil\fcharset0 AppleColorEmoji;
}
{\colortbl;\red255\green255\blue255;\red13\green62\blue197;\red6\green21\blue57;\red21\green91\blue35;
}
{\*\expandedcolortbl;;\cssrgb\c4314\c34118\c81569;\cssrgb\c1569\c11765\c28627\c70196;\cssrgb\c7843\c42353\c18039;
}
\margl1440\margr1440\vieww19660\viewh17380\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // Initialize Leaflet map\
const map = L.map('map').setView([42.9849, -81.2452], 17); // Replace with your city\'92s lat/lng\
L.tileLayer('https://\{s\}.tile.openstreetmap.org/\{z\}/\{x\}/\{y\}.png', \{\
    attribution: '\'a9 <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',\
    maxZoom: 19\
\}).addTo(map);\
\
// Initialize Firebase\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf2 \expnd0\expndtw0\kerning0
const\cf3  firebaseConfig = \{\
\'a0 \'a0 apiKey: \cf4 "AIzaSyDyGkDkWGVxcGVm19s0q033e6BpgbOLZ3A"\cf3 ,\
\'a0 \'a0 authDomain: \cf4 "salesmap-20162.firebaseapp.com"\cf3 ,\
\'a0 \'a0 projectId: \cf4 "salesmap-20162"\cf3 ,\
\'a0 \'a0 storageBucket: \cf4 "salesmap-20162.firebasestorage.app"\cf3 ,\
\'a0 \'a0 messagingSenderId: \cf4 "974851563054"\cf3 ,\
\'a0 \'a0 appId: \cf4 "1:974851563054:web:66fffbe36aa34b0e7f49bf"\cf3 \
\'a0 \};
\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 firebase.initializeApp(firebaseConfig);\
const db = firebase.firestore();\
\
// Marker management\
let markers = [];\
let selectedEmoji = '
\f2 \uc0\u9989 
\f0 ';\
\
function setEmoji(emoji) \{\
    selectedEmoji = emoji;\
    document.querySelectorAll('#emoji-bar button').forEach(btn => \{\
        btn.style.backgroundColor = btn.innerText.includes(emoji) ? '#e0e0e0' : '';\
    \});\
\}\
\
// Add marker on click\
map.on('click', function(e) \{\
    const markerId = Date.now().toString();\
    const marker = L.marker([e.latlng.lat, e.latlng.lng], \{\
        icon: L.divIcon(\{ \
            html: selectedEmoji, \
            className: 'emoji-marker',\
            iconSize: [24, 24]\
        \})\
    \}).addTo(map);\
    marker.bindPopup(`<button onclick="deleteMarker('$\{markerId\}')">Delete</button>`);\
    markers.push(\{ id: markerId, marker: marker \});\
    db.collection('markers').doc(markerId).set(\{\
        lat: e.latlng.lat,\
        lng: e.latlng.lng,\
        emoji: selectedEmoji,\
        timestamp: firebase.firestore.FieldValue.serverTimestamp()\
    \}).catch(error => console.error("Error adding marker: ", error));\
\});\
\
// Load markers from Firebase\
db.collection('markers').onSnapshot(snapshot => \{\
    markers.forEach(m => map.removeLayer(m.marker));\
    markers = [];\
    snapshot.forEach(doc => \{\
        const data = doc.data();\
        const marker = L.marker([data.lat, data.lng], \{\
            icon: L.divIcon(\{ \
                html: data.emoji, \
                className: 'emoji-marker',\
                iconSize: [24, 24]\
            \})\
        \}).addTo(map);\
        marker.bindPopup(`<button onclick="deleteMarker('$\{doc.id\}')">Delete</button>`);\
        markers.push(\{ id: doc.id, marker: marker \});\
    \});\
\}, error => console.error("Error loading markers: ", error));\
\
// Delete marker\
function deleteMarker(id) \{\
    db.collection('markers').doc(id).delete().catch(error => console.error("Error deleting marker: ", error));\
\}}